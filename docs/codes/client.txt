tps = lc_service.download_tps(task["item"])  # Download target pixel.
lc = lc_service.tps_to_lc(tps)  # Convert target pixel to light curve.
transits = []

for max_per in LcService.PERIODS:
    pdg = lc_service.get_pdg(lc)  # Get periodogram.
    per, t0 = pdg.period_at_max_power, pdg.transit_time_at_max_power
    lc = lc[~pdg.get_transit_mask(per, t0, dur)]
    gv, lv = lc_service.get_views(lc, pdg)  # Get global and local view.

    if lc_service.is_planet(gv, lv):  # Detect transit using NN.
        transits.append(lc_service.get_transit(pdg, gv, lv))

submit({"solution": {"transits": transits}})  # Submit solution.
